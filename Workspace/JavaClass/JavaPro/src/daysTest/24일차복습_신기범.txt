1.  "1. Java 팀 구성.txt" 파일을 읽어와서
    HashMap 컬렉션 클래스를 사용해서 
    key   - TeamVO (name, totalNumber , leader ) 
    value - ArrayList<MemberVO>
    로 저장해서 출력하는 코딩을 하세요. 
    ( 조건 1: key 값으로 TeamVO 클래스 선언 )
    ( 조건 2: value 값으로 어제 선언한 MemberVO 클래스 사용 )

 [출력형식]
 
[1조(7명) - 이경서]
  [1] 신종혁
  [2] 이재영
  [3] 송해영
  [4] 신기범
  [5] 이준희
  [6] 김성준 
[2조(7명) - 박민석]
  [1] 유희진
  [2] 고경림
  [3] 임경재
  [4] 이지현
  [5] 김정주
  [6] 김호영  
[3조(6명) - 박정호]
  [1] 이상문
  [2] 이주영
  [3] 정하영
  [4] 이동현
  [5] 주강민   
    
    package days25;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map.Entry;

public class Ex01 {

	public static void main(String[] args) {
		
		HashMap<TeamVo, ArrayList<MemberVO>> teamGroup = new LinkedHashMap<>();
		ArrayList<MemberVO> teamList = null;
		String fileName = ".\\src\\days19\\1. Java 팀 구성.txt";
		String line = null; 
		String teamName = null; 
		TeamVo teamVo = null;
		MemberVO memberVO = null;
		 
		 try(BufferedReader br = new BufferedReader(new FileReader(fileName))) {
			while ((line=br.readLine()) !=null && !line.equals("")) {
				teamList = new ArrayList<MemberVO>();
				teamName = line;
				line = br.readLine();
				String[] teams = line.split("\\s*,\\s*");
				for (int i = 0; i < teams.length; i++) {
					if (teams[i].contains("(팀장)")) {
						teams[i] = teams[i].replace("(팀장)", "");
						teamVo = new TeamVo(teamName, teams[i], teams.length);
						memberVO = new MemberVO(teams[i], "팀장");
					} else {
							memberVO = new MemberVO(teams[i], "팀원");
					} //else
					teamList.add(memberVO);
				} // for
				teamGroup.put(teamVo, teamList);
				//TeamVO (name, totalNumber , leader ) 
				
			}//while
			 
			 disp(teamGroup);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
	} // main

	private static void disp(HashMap<TeamVo, ArrayList<MemberVO>> teamGroup) {
		
		Iterator<Entry<TeamVo, ArrayList<MemberVO>>> ir = teamGroup.entrySet().iterator();
		MemberVO memberVO = null;
		
		TeamVo teamVo = null;
		String teamName = null;
		String teamLeader = null;
		//String name = null;
		ArrayList<MemberVO> teamList = null;
		int teamCount = 0;
		
		while (ir.hasNext()) {
			Entry<TeamVo, ArrayList<MemberVO>> entry =  ir.next();
			
			teamVo = entry.getKey();
			teamList = entry.getValue();
			teamName = teamVo.getName();
			teamLeader = teamVo.getLeader();
			teamCount = teamVo.getTotalNumber();
			System.out.printf("[%s(%d명) - %s]\n",teamName,teamCount,teamLeader);
			Iterator<MemberVO> ir2 = teamList.iterator();
			int seq =1;
			if (ir2.hasNext()) ir2.next();
			while (ir2.hasNext()) {
				MemberVO teamL = ir2.next();
				String name = teamL.getName();
				System.out.printf("  [%d] %s\n",seq++,name);
			}
			
		}
		
	}
	
}
/*
key   - TeamVO (name, totalNumber , leader ) 
value - ArrayList<MemberVO>
로 저장해서 출력하는 코딩을 하세요. 
( 조건 1: key 값으로 TeamVO 클래스 선언 )
( 조건 2: value 값으로 어제 선언한 MemberVO 클래스 사용 )
*/
    
 2-1.  제네릭스(Generics) 란 ?
	 다양한 타입의 객체를 다루는 메서드, 컬렉션 클래스에서 
	컴파일시 타입을 체크해 주는 기능
 2-2. 제네릭스의 장점
 		객체의 타입 안전성을 높이고, 형 변환의 번거로움이 줄어든다 
 2-3. 제네릭 클래스 선언 형식
 	 원시타입 뒤에 <T> 타입 매개변수, 타입변수 선언
 	 class test<T>{}
 2-4. 용어 정리
    
    clas Box<T>{}
    
   위의 제네틱 클래스 선언을 보고
    1) 원시 타입(raw Type)을 적으세요.
    class Box{}
    2)타입변수을 적으세요. <T>
    3) 제네릭 클래스을 적으세요.
    clas Box<T>{}
    
    Box<String> b = new Box<>();
    4) 대입된 타입을 적으세요.	String
    5) 제네릭 타입 호출	
 2-5. 제한된 제네릭 클래스에 대해서 설명하세요.  
    class FruitBox<T extends Fruit & Eatable> extends Box<T>{
    }    
    Fruit의 자식클래스이고 Eatable를 구현한 클래스만 타입변수로 사용
 2-6.  와일드 카드에 대해서 설명하세요.  
    static Juice makeJuice(FruitBox<? extends Fruit> box){
    } Fruit을 상속받은 자식 클래스면 아무거나 사용가능
    
 2-7. 제네릭 메서드란 ? 메서드의 선언부에 제네릭타입이 선언된 메서드
 2-8. 제네릭 메서드 선언 형식을 적으세요. 	
		static <T> Juice makeJuice(FruitBox<T> box){}
 3-1. 열거형(enums)이란 ? 
 서로 관련된 상수를 편리하게 사용하기 위한 것
 3-2. 열거형의 선언 형식을 적으세요.              
 enum 열거형이름 {상수명, 상수명, ...};