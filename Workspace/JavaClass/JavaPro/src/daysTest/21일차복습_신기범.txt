1. 용어 정리
  1) 컬렉션 ?	데이터의 집합
  2) 프레임워크( framework ) ? 표준화된 체계 / 개발환경 
  3) 컬렉션 프레임워크(JCF) ? 		데이터의 집합을 관리 하기 위한 표쥰화 된 체계
  4) 컬렉션 프레임워크의 핵심 인터페이스( 3가지 타입 ) 에 대해서 설명하세요.
  			Collection
  				1)	List	-	순서 있음 중복 허용
  						ArrayList,	Stack,	LinkedList,	 Vector
  				2)	Set	-	순서 없음, 중복 허용 안함
  						HashSet,	TreeSet
  				3)	Map	-	(key:value)으로 이루어져 있음 순서 없음 키는 중복 허용 안하고 밸류는 중복 가능 
  								HashMap, HashTable, TreeMap, Properties 
   
2. 현재 날짜와 시간 정보를   LocalDateTime 클래스를 사용해서 
     아래와 같은 형식으로 출력하세요 . 
  [출력형식]
  2023/08/11 금요일   07:02:32.259
  public static void main(String[] args) {
		String pattern = "yyyy/MM/dd E요일   hh:mm:ss.SSS";
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern(pattern);
		LocalDateTime ldt = LocalDateTime.now();
		 String s = dtf.format(ldt);
		System.out.println(s);
	} // main
	
2-2. String s = "2023.08.11 (금)" 문자열을 LocalDate 클래스로 변환시키세요.

String pattern = "yyyy.MM.dd (E)";
		String s = "2023.08.11 (금)";
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern(pattern);
		LocalDate ld = LocalDate.parse(s, dtf);

3. ArrayList 에 대해서 설명하세요 .
	가장 많이 사용되는 컬렉션 클래스
	Collection
		ㄴ List 인터페이스를 구현한 클래스
	순서 유지, 중복 허용
	배열의 단점(크기 증/감,삽입 등)을 보완한  클래스
3-2. ArrayList 컬렉션 클래스를 사용해서
  1) 팀원들의 이름을 요소로 추가  
  2) 반복자를 사용해서 모든 요소(팀원들) 출력 
  3) 팀원들의 인원수를 출력
  4) 두 번째 팀원이 누구인지 확인 후 "홍길동" 팀원으로 수정
  5) "홍길동" 팀원의 존재 유무를 확인 후 삭제
  6) "김"씨 팀원들만 삭제 후 확인.
  
  public static void main(String[] args) {
		String t1 = "이경서, 신종혁, 이재영, 송해영 , 신기범, 이준희, 김성준 ";
		String[] t = t1.split("\\s*,\\s*");
		ArrayList team = new ArrayList();
		for (int i = 0; i < t.length; i++) {
			team.add(t[i]);
		} // for
		Iterator ir = team.iterator();
		while (ir.hasNext()) {
			String s = (String) ir.next();
			System.out.printf("%s ",s);
		}
		System.out.println();
		System.out.println(team.size());
		System.out.println(team.get(1));
		team.set(1, "홍길동");
		System.out.println(team);
		if (team.contains("홍길동")) {
			team.remove( team.indexOf("홍길동"));
			System.out.println(team);
		} //if
		
		String s;	
		for (int i = 0; i < team.size(); i++) {
			s = (String) team.get(i);
			if (s.startsWith("김")) {
				team.remove(i);
			} //if
		} // for
		System.out.println(team);
	} // main
  
  
4. java.time.LocalDateTime 클래스 사용
   1) 설문 시작일 : 23.8.10   9:00:00
   2) 설문 종료일 : 23.8.15  18:00:00
   
   지금 현재 설문 가능여부에 대해서 출력하세요.  ( 가능, 불가능 )
   
   public static void main(String[] args) {
		LocalDateTime sdt = LocalDateTime.of(23,8,10,9,00,00);
		LocalDateTime edt	= LocalDateTime.of(23,8,15,18,00,00);
		LocalDateTime now = LocalDateTime.now();
		
		if (now.isAfter(edt) && sdt.isBefore(now)) {
			System.out.println("가능");
		} else System.out.println("불가능");
	} // main
  
5. 이름, 나이 필드를 가진 Person 클래스를 선언하고
   ArrayList 컬렉션 클래스에  Person 객체를 요소로 추가하고 
   이름으로 오름차순 정렬해서    출력하는 코딩을 하세요 ..    
   
  public class Ex04test {

	public static void main(String[] args) {
		ArrayList list = new ArrayList();
		Person p;
		String name;
		int age;
		for (int i = 0; i < 10; i++) {
			name = days21.Ex15.getName();
			age = (int)(Math.random()*10)+1;
			p = new Person(name, age);
			list.add(p);
		} // for
		
		list.sort(new Comparator<Person>() {

			@Override
			public int compare(Person o1, Person o2) {
				
				return o1.getName().compareTo(o2.getName());
			}
		});
		
		Iterator ir = list.iterator();
		while (ir.hasNext()) {
			Person a = (Person) ir.next();
			System.out.println(a);
		}
		
		
		
	} // main
	
}

class Person{
	private String name;
	 private int age;
	 
	 
	public Person(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	@Override
	public String toString() {
		return "Person [name=" + name + ", age=" + age + "]";
	}
	
	 
}
  
  
  
    