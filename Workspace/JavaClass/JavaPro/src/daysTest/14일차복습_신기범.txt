1. private로 선언된 필드에 대해서 설명하세요.
같은 클래스에서만 참조 가능 
필드를 읽기 나 쓰기 전용으로 만들기 위해서 사용

2. 기본형/참조형 매개변수에 대해서 설명하세요. 
기본형 매개변수는 값만 넘겨 주고 참조형 매게변수는 값이 있는 주소를 넘겨준다
2-2.기본형/참조형 반환타입에 대해서 설명하세요.
반환타입이 참조형이면 메서드의 리턴값이 객체의 주소값이다
3. 생성자에 대해서 설명하세요.
생성자는 메서드 이다
임의로 호출 불가능 하다
메서드 명 == 클래스명
접근지정자 사용 가능 기타 제어자 사용 안함
리턴형 안씀
매개변수가 하나도 없는 생성자는 기본 생성자 이다
기본생성자를 1개라도 만들지 않았다면 컴파일러가 기본 생성자 추가후 컴파일
객체 생성할 때 마다 자동 호출 - 필드 초기화
생성자는 오버로딩 가능
생성자는 상속 안됨
4. this 키워드에 대해서 설명하세요.
자기 자신의 주소값을 가지는 참조 변수
this.필드명, this.메서드명 으로 사용
this()= 생성자에서 또 생성자 호출시 사용, 가장 앞라인에 와야함
단독으로 사용시 리턴 또는 매개변수
5. static 키워드에 대해서 설명하세요.
필드 선언시 static 을 붙이면 모든 객체가 공유하는 멤버변수, 멤버 함수가 됨

6. 필드(멤버변수)를 초기화 하는 방법에 대해서 설명하세요
명시적 초기화 
생상자 초기화 
인스턴스 블럭
클래스 블럭
6-2. 필드 초기화 우선 처리 순위에 대해서 설명하세요
명시적 초기화 - 클래스 블럭 - 인스턴스 블럭 - 생상자 초기화
7. 클래스 간의 관계에 대해서 설명하세요 .
has - a 관계

is - a관계 (상속)

8.   [취업 문제] ego(자아)
  String n = "keNik";   
  String m= "kKnie";   
  
  위의 두 문자열 n, m 이 알파벳과 알파벳갯수가 똑같은지 비교하는 코딩 
  결과는 같을 경우 true/ 다를 경우 false 로 출력.
  조건) 대소문자는 구분하지 않는다.  
package days15;


public class Ex01 {

	public static void main(String[] args) {
		String n = "keNik";
		String m = "kKnie";
	
		int countn =0;
		int countm =0;
		for (int i = 0; i < n.length(); i++) {
			if(Character.toString(n.charAt(i)).matches("^[a-zA-Z]$")) countn++;
		} // for
		for (int i = 0; i < m.length(); i++) {
			if(Character.toString(m.charAt(i)).matches("^[a-zA-Z]$")) countm++;
		} // for
		
		System.out.println(n.equalsIgnoreCase(m)&&countn==countm?"true":"false");
		
	} // main
}




